var Dashboard = function () {
    return {
        initCalendar: function () {
            if (jQuery().fullCalendar) {
                var e = new Date,
				t = e.getDate(),
				a = e.getMonth(),
				i = e.getFullYear(),
				l = {};
                $("#calendar").width() <= 400 ? ($("#calendar").addClass("mobile"), l = {
                    left: "title, prev, next",
                    center: "",
                    right: "today,month,agendaWeek,agendaDay"
                }) : ($("#calendar").removeClass("mobile"), l = App.isRTL() ? {
                    right: "title",
                    center: "",
                    left: "prev,next,today,month,agendaWeek,agendaDay"
                }
					 : {
					     left: "title",
					     center: "",
					     right: "prev,next,today,month,agendaWeek,agendaDay"
					 }),
				$("#calendar").fullCalendar("destroy"),
				$("#calendar").fullCalendar({
				    disableDragging: !1,
				    header: l,
				    editable: !0,
				    events: [{
				        title: "All Day",
				        start: new Date(i, a, 1),
				        backgroundColor: App.getBrandColor("yellow")
				    }, {
				        title: "Long Event",
				        start: new Date(i, a, t - 5),
				        end: new Date(i, a, t - 2),
				        backgroundColor: App.getBrandColor("blue")
				    }, {
				        title: "Repeating Event",
				        start: new Date(i, a, t - 3, 16, 0),
				        allDay: !1,
				        backgroundColor: App.getBrandColor("red")
				    }, {
				        title: "Repeating Event",
				        start: new Date(i, a, t + 6, 16, 0),
				        allDay: !1,
				        backgroundColor: App.getBrandColor("green")
				    }, {
				        title: "Meeting",
				        start: new Date(i, a, t + 9, 10, 30),
				        allDay: !1
				    }, {
				        title: "Lunch",
				        start: new Date(i, a, t, 14, 0),
				        end: new Date(i, a, t, 14, 0),
				        backgroundColor: App.getBrandColor("grey"),
				        allDay: !1
				    }, {
				        title: "Birthday",
				        start: new Date(i, a, t + 1, 19, 0),
				        end: new Date(i, a, t + 1, 22, 30),
				        backgroundColor: App.getBrandColor("purple"),
				        allDay: !1
				    }, {
				        title: "Click for Google",
				        start: new Date(i, a, 28),
				        end: new Date(i, a, 29),
				        backgroundColor: App.getBrandColor("yellow"),
				        url: "http://google.com/"
				    }
				    ]
				})
            }
        },
        initDashboardDaterange: function () {
            //debugger;
            var exStart = moment("2016-03-07");
            var exEnd = moment("2016-03-14");
            jQuery().daterangepicker && ($("#dashboard-report-range").daterangepicker({
                ranges: {
                    //Today: [moment(), moment()],
                    //Yesterday: [moment().subtract("days", 1), moment().subtract("days", 1)],
                    "Last 7 Days": [moment().subtract("days", 6), moment()],
                    //"Last 30 Days": [moment().subtract("days", 29), moment()],
                    //"Example": [exStart, exEnd],
                    "This Month": [moment().startOf("month"), moment().endOf("month")],
                    "Last Month": [moment().subtract("month", 1).startOf("month"), moment().subtract("month", 1).endOf("month")]
                },
                locale: {
                    format: "MM/DD/YYYY",
                    separator: " - ",
                    applyLabel: "Apply",
                    cancelLabel: "Cancel",
                    fromLabel: "From",
                    toLabel: "To",
                    customRangeLabel: "Custom",
                    daysOfWeek: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],  //["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    firstDay: 1
                },
                opens: App.isRTL() ? "right" : "left"
            }, function (e, t, a) {
                "0" != $("#dashboard-report-range").attr("data-display-range") && $("#dashboard-report-range span").html(e.format("MMMM D, YYYY") + " - " + t.format("MMMM D, YYYY"))
                //var nimoSelectedArea = d.properties.KABKOTNO;



                //var startDate = $('[name="daterangepicker_start"]').val();
                //var endDate = $('[name="daterangepicker_end"]').val();
                //var FirstDateStart = moment(startDate, "MM/DD/YYYY").day(1).format("YYYY-MM-DD");
                //var FirstDateEnd = moment(startDate, "MM/DD/YYYY").day(7).format("MM/DD/YYYY");
                //var EndDateStart =  moment( endDate, "MM/DD/YYYY").day(1).format("MM/DD/YYYY");
                //var EndDateEnd = moment(endDate, "MM/DD/YYYY").day(7).format("YYYY-MM-DD");

                //$("#dashboard-report-range").attr("data-display-range") && $("#dashboard-report-range span").html(moment("2017-07-03").format("MMMM D, YYYY") + " - " + moment("2017-07-10").format("MMMM D, YYYY")), $("#dashboard-report-range").show();




                //alert(FirstDateStart + " " + EndDateEnd);
                var nimoSelectedDate = $("#dashboard-report-range span").html();
                //alert(nimoSelectedDate);
                var selectedArea = $("#noKota").text();
                //document.cookie = "nimoSelectedArea=" + nimoSelectedArea;
                //document.cookie = "nimoSelectedDate=" + nimoSelectedDate;

                //var fields = nimoSelectedDate.split('-');
                //  //alert(fields[0]+" "+fields[1]);

                //  var dt = new Date(fields[0]);

                //  var GetDay = dt.getDay();

                var dataPost = { "DATE_STAMP_STRING": nimoSelectedDate, "AREA": selectedArea, "PARAM_ID": 1 };
                //var Model = { DATE_STAMP_STRING: nimoSelectedDate, AREA: nimoSelectedArea };
                //var bool = true;

                var dataPostArea = {};
                dataPostArea.AREA = selectedArea;



                $.ajax({
                    //type: "POST",
                    type: "POST",
                    url: url_api_dashboard2,
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify(dataPostArea),
                    crossOrigin: false,
                    success: function (data) {

                        capMax = data.CAPACITY_MAX;
                        //alert(capMax);

                        $.ajax({
                            type: "POST",
                            //type: "GET",
                            url: url_api_dashboard,
                            contentType: "application/json",
                            dataType: "json",
                            data: JSON.stringify(dataPost),
                            crossOrigin: false,
                            success: function (data) {

                                $('#heatMapChart1').empty();
                                $('#heatMapBarChart2').empty();
                                $('#PieChart1').empty();
                                $('#AsterPlot1').empty();
                                $('#graphic').empty();
                                $('#titlebar').empty();
                                //$('#heatMapBarChart2').prepend($("<div id='labelselected2' style='margin-left:40px;'></div>"));
                                $('#heatMapBarChart2').prepend($("<div id='labelselected' style='margin-left:20px;margin-bottom:-50px;'></div>"));
                                $('#lblValue').append($("<div id='labelheat'></div>"));
                                $('#labelselected').before("<strong>Hourly Utilization Profile </strong>");
                                HeatAndBar(data.Items);
                                //data.TotalFlow = data.TotalFlow.toFixed(3);
                                //var totalflowHourly = (data.TotalFlow / 24) / 7;
                                var totalflowHourly = data.MaxTotalFlow;
                                var totalFlowText = totalflowHourly.toFixed(0);

                                totalflowHourly = totalflowHourly.toFixed(3);

                                capMax = capMax - totalflowHourly;
                                var capMaxOver = capMax;
                                capMaxOver = capMaxOver.toFixed(0);
                                capMax = capMax.toFixed(3);

                                var textPie = 'Unutilized Capacity';
                                if (capMax < 0) {
                                    totalflowHourly = 100;
                                    capMax = 0;
                                    textPie = "Over Capacity";

                                }
                                piechart(totalflowHourly, capMax);

                                if (textPie == "Over Capacity") {


                                    $('#legendFreq0').text(totalFlowText);
                                    $('#legendFreq1').text(capMaxOver);
                                }

                                $('#barlegend0').text('Used Capacity');
                                $('#barlegend1').text(textPie);
                                //anotherpietest(data.TotalFlow, data.TotalFlowAllArea);
                                //asterchart(data.Items);
                                //anotheraster(data.Items);
                                barreplaceaster(data.Items);
                            }

                        });
                    }

                });
                //debugger;
                //$("#D3_Chart2").empty();
                //$("#Piechart1").empty();
                //$("#AsterPlot").empty();
                //$('#D3_Chart2').load('/Home/Chart2');
                //$('#Piechart1').load('/Home/Piechart');
                //$('#AsterPlot').load('/Home/AsterChart');
            }), "0" != $("#dashboard-report-range").attr("data-display-range") && $("#dashboard-report-range span").html(moment("2017-07-03").format("MMMM D, YYYY") + " - " + moment("2017-07-10").format("MMMM D, YYYY")), $("#dashboard-report-range").show())


        },
        init: function () {
            this.initCalendar(),
			this.initDashboardDaterange()
        }
    }
}




();
App.isAngularJsApp() === !1 && jQuery(document).ready(function () {
    Dashboard.init()
});
